<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="To-Do-List Application" content="Plan, Act, Achieve: Get Started Now! 😉..">

  <!-- Favicon -->
  <link rel="shortcut icon" href="images/todoWhite.png" type="image/x-icon">

  <!-- Stylesheets -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous" referrerpolicy="no-referrer">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  {{!-- <link rel="stylesheet" href="/style.css"> --}}
  <style>
    /*  @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"); */
@import url("https://fonts.googleapis.com/css2?family=Lora:ital@1&display=swap");
/* main title */
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+TC&display=swap");
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Noto Sans TC", sans-serif;
}



body {
  font-weight: 400;
  min-height: 100vh;
  padding: 0;
  box-sizing: border-box;
  display: flex;
  position: relative;
  margin-bottom: -90px;
  flex-direction: column;
  
  background: radial-gradient(
    2224px at 10.6% 8.8%,
    rgb(255, 255, 255) 0%,
    rgb(153, 202, 251) 100.2%
  );
}

.dark-mode .content-container{
  min-height: 95vh;
}

.light-mode .content-container{
  min-height: 95vh;
  background: radial-gradient(2224px at 10.6% 8.8%, rgb(255, 255, 255) 0%, rgb(153, 202, 251) 100.2%);
}
.switch {
  font-size: 17px;
  position: relative;
  display: inline-block;
  width: 64px;
  height: 34px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #73c0fc;
  transition: 0.4s;
  border-radius: 30px;
}
html {
  scroll-behavior: smooth;
}
#myBtn {
  scale:1.25;
  margin:10px;
  display: none; 
  position: fixed; 
  bottom: 75px;
  left: 25px; 
  z-index: 99;
  border: none; 
  outline: none; 
  cursor: pointer; 
  width: 45px;
  padding: 13px;
  height: 45px;
  border-radius: 50%;
  background-color: rgb(255, 255, 255);
  box-shadow: #6c6c6c 0px 0px 10px 0px;
}

#myBtn:hover {
  filter: invert(100%);
}

.dark-mode #myBtn {
  scale:1.25;
  margin:10px;
  display: none; 
  position: fixed; 
  bottom: 75px;
  left: 25px; 
  z-index: 99;
  border: none; 
  outline: none; 
  cursor: pointer; 
  width: 45px;
  padding: 13px;
  height: 45px;
  filter: invert(0%);
  border-radius: 50%;
  background-color: rgb(255, 255, 255);
  box-shadow: #6c6c6c 0px 0px 10px 0px;
}

.dark-mode  #myBtn:hover {
    filter: invert(100%);
}

.slider:before {
  position: absolute;
  content: "";
  height: 30px;
  width: 30px;
  border-radius: 20px;
  left: 2px;
  bottom: 2px;
  z-index: 2;
  background-color: #e8e8e8;
  transition: 0.4s;
}

.sun svg {
  position: absolute;
  top: 6px;
  left: 36px;
  z-index: 1;
  width: 24px;
  height: 24px;
}

.moon svg {
  fill: #73c0fc;
  position: absolute;
  top: 5px;
  left: 5px;
  z-index: 1;
  width: 24px;
  height: 24px;
}

/* .switch:hover */
.sun svg {
  animation: rotate 15s linear infinite;
}

@keyframes rotate {
  0% {
    transform: rotate(0);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* .switch:hover */
.moon svg {
  animation: tilt 5s linear infinite;
}

@keyframes tilt {
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(-10deg);
  }
  75% {
    transform: rotate(10deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

.input:checked + .slider {
  background-color: #183153;
}

.input:focus + .slider {
  box-shadow: 0 0 1px #183153;
}

.input:checked + .slider:before {
  transform: translateX(30px);
}
.container-xl {
  position: relative;
  width: 100%;
  flex: 1;
  /* Take remaining vertical space */
}

.text {
  font-size: 40px;
  color: rgb(255, 255, 255);
  letter-spacing: 10px;
  border-right: 5px solid black;
  white-space: nowrap;
  animation: typing 5s steps(12) infinite,
  cursor 0.4s step-end infinite alternate;
  overflow: hidden;
  animation-fill-mode: forwards;
}

@keyframes cursor {
  50% {
    border-color: transparent;
  }
}

@keyframes typing {
  from {
    width: 0;
  }

  to {
    width: 65%;
  }
}

.text-center {
  margin-left: auto;
  margin-right: auto;
}

body.dark-mode {
  background: linear-gradient(
    112.1deg,
    rgba(0, 60, 255, 0.756) 11.4%,
    rgb(63, 76, 119) 70.2%
  );
  color: #c0a5ff;
}

body.dark-mode::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(1, 1, 1, 0.9);
  z-index: -1;
}

.main {
  position: relative;
  width: 48rem;
  height: 100%;
  text-align: center;
  padding: 4rem;
  border-radius: 2em;
  background-clip: padding-box;
}

.light-mode .main {
  background: rgba(255, 255, 255, 0.447);
  box-shadow: rgb(204, 219, 232) 3px 3px 6px 0px inset,
    rgba(255, 255, 255, 0.5) -3px -3px 6px 1px inset;
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.18);
  color: #000;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f1f1f1;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

.dark-mode .dropdown-content {
  position: absolute;
  background-color: rgba(0, 0, 0, 0.9);
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

.show {
  display: block;
}

.dark-mode .main {
  background: rgba(83, 83, 83, 0.25);
  box-shadow: rgba(145, 56, 255, 0.35) 0px 30px 100px 0px;
  border: 2px solid rgba(146, 56, 255, 0.711);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 10px;
  color: #e8e8e8;
}

.main {
  position: relative;
  width: 48rem;
  height: 100%;
  text-align: center;
  padding: 4rem;
  border-radius: 2em;
  backdrop-filter: blur(45px);
  background-clip: padding-box;
}

.list-group-item {
  font-size: 1.3rem;
  margin: 0.4rem;
  text-align: left;
  border-radius: 1rem !important;
  word-break: break-all;
  word-wrap: break-word;
  padding: 0.75rem;
  width: 80%;
}

.list-group-item button {
  margin: 0 0.2rem;
  padding: 0.4rem 1rem;
  border-radius: 5rem;
}

.list-group-item button ion-icon {
  pointer-events: none;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content a:hover {
  background-color: #ddd;
  cursor: pointer;
}

.list {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.main h2,
h3 {
  font-weight: 600;
}

@media screen and (max-width: 415px) {
  .main_form .form_btn {
    font-size: 1rem;
    padding: 0.2rem 0.8rem;
  }

  .main {
    width: 100%;
    height: 380px;
    padding: 1rem;
  }

  .main_form #item {
    font-size: 1rem;
  }
}

@media (max-width: 960px) {
  .main {
    width: 100%;
    height: 100%;
    padding: 1rem;
  }
}

.message {
  width: 300px;
  padding: 15px;
  border: 2px solid;
  border-radius: 5px;

  position: fixed;
  z-index: 10;
  top: 20px;
  right: 20px;
}

.success-message {
  color: #0f5132;
  background-color: #d1e7dd;
  border-color: #badbcc;
}

.danger-message {
  color: #842029;
  background-color: #f8d7da;
  border-color: #f5c2c7;
}

.form-check-input {
  position: relative;
  margin-left: 10px;
  margin-right: 5px;
}

#dueDate::placeholder {
  color: #fff;
}

#dueDate:hover::placeholder {
  color: #fff;
  opacity: 1;
}

.hidden {
  display: none;
}

input[type="checkbox"]:not(.task-completed) {
  position: relative;
  width: 80px;
  height: 40px;
  -webkit-appearance: none;
  appearance: none;
  background: #000;
  outline: none;
  border-radius: 2rem;
  cursor: pointer;
  box-shadow: inset 0 0 5px rgba(1, 110, 225);
}

input[type="checkbox"]:not(.task-completed)::before {
  content: "";
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: #fff;
  position: absolute;
  top: 0;
  left: 0;
  transition: 0.5s;
}

input[type="checkbox"]:not(.task-completed):checked::before {
  transform: translateX(100%);
  background: #fff;
}

.custom-confirm,
.custom-confirm-all {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  align-items: flex-start;
  justify-content: center;
}

.confirm-content,
.confirm-content-all {
  background-color: #fff;
  padding: 20px;
  top: 20px;
  border-radius: 5px;
  text-align: center;
  position: relative;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  cursor: pointer;
  font-size: 20px;
  color: #333;
}

h2 {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}

h4 {
  color: #000;
}

.confirm-content,
.confirm-content-all p {
  margin-bottom: 20px;
}

#confirm-yes,
#confirm-no,
#confirm-yes-all,
#confirm-no-all {
  margin: 10px;
  padding: 10px 30px;

  cursor: pointer;
  border-radius: 5px;
}

@media screen and (max-width: 768px) {
  .mode-toggle {
    margin-left: 20px;
  }

  .form_btn {
    font-size: 1rem;
    padding: 0.8rem 2rem;
  }

  .form_btn {
    font-size: 1rem;
    padding: 0.5rem 1rem;
    width: auto;
  }
}

@media screen and (max-width: 570px) {
  .form_btn {
    font-size: 1rem;
    padding: 0.8rem 2rem;
  }

  .main_form {
    flex-direction: column;
    border-radius: 2rem;
  }

  .main_form input[type="text"] {
    width: 100%;
    margin: 0.5rem;
  }

  .list-group {
    margin-top: 1rem;
  }
}

@media screen and (max-width: 424px) {
  .main_form input[type="text"] {
    width: 100%;
  }

  .list-group-item button {
    margin: 0;
    padding: 0.2rem 0.5rem;
    border-radius: 1rem;
  }

  .form_btn {
    padding: 0.7rem 1rem;
    margin: 1rem;
  }

  .list-group {
    margin-top: 1rem;
  }

  #dueDate {
    padding: 0.7rem 1rem;
    margin: auto;
  }
}

@media screen and (max-width: 390px) {
  .list-group-item {
    padding: 0.3rem;
  }

  .list-group {
    margin-top: 1rem;
  }

  .main_form .form_btn {
    font-size: 0.7rem;
    padding: 0.7rem 1rem;
  }

  #dueDate {
    font-size: smaller;
    width: 120px;
    height: 35px;
    margin: auto;
    padding: 0;
  }
}
body:not(.dark-mode)::-webkit-scrollbar {
  width: 12px;
  background-color: #dfe6e9;
}

body:not(.dark-mode)::-webkit-scrollbar-track {
  border: 5px solid white;
  background-color: #6c6c6c;
}

body:not(.dark-mode)::-webkit-scrollbar-thumb {
  background-color: #74b9ff;
  border-radius: 10px;
}

body.dark-mode::-webkit-scrollbar {
  width: 12px;
  background-color: #000000;
}

body.dark-mode::-webkit-scrollbar-track {
  border: 5px solid rgb(0, 0, 0);
  background-color: #ffffff;
}

body.dark-mode::-webkit-scrollbar-thumb {
  background-color: rgb(146, 56, 255);
  border-radius: 10px;
}
/* Preloader Starts */
.preloader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.writing-loader {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 5rem;
  position: absolute;
}
.writing-loader * {
  position: absolute;
  color: #0081a7;
}
.writing-loader .file-text {
  color: #0081a7;
  opacity: 0;
  animation: fileAppear-1 8s 0s linear infinite;
  position: absolute;
}
@keyframes fileAppear-1 {
  10% {
    opacity: 0;
  }
  25% {
    opacity: 1;
  }
  30% {
    opacity: 1;
  }
  33% {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
.writing-loader .pen-container {
  display: flex;
  justify-content: center;
  align-items: center;
  top: -50px;
  left: -25px;
  width: 40px;
  height: 40px;
  animation: writing 3s linear infinite;
}
@keyframes writing {
  from {
    transform: translate(0, 0);
  }
  5% {
    transform: translate(100%, 0);
  }
  15% {
    transform: translate(0%, 25%);
  }
  20% {
    transform: translate(100%, 25%);
  }
  25% {
    transform: translate(0%, 50%);
  }
  30% {
    transform: translate(100%, 50%);
  }
  35% {
    transform: translate(0%, 75%);
  }
  40% {
    transform: translate(100%, 75%);
  }
  45% {
    transform: translate(0%, 100%);
  }
  50% {
    transform: translate(100%, 100%);
    opacity: 1;
  }
  100% {
    transform: translate(100%, 100%);
    opacity: 0;
  }
}
.writing-loader .pen-container .pen {
  color: #000000;
  font-size: 2.5rem;
}
/* Preloader Ends  */

/*Task priority indicator*/
.light-mode .task-priority-High {
  border-left: 6px solid rgba(255, 0, 0, 0.474);
}

.light-mode .task-priority-Medium {
  border-left: 6px solid rgba(255, 166, 0, 0.447);
}

.light-mode .task-priority-Low {
  border-left: 6px solid rgba(0, 128, 0, 0.474);
}

.light-mode .task-completed {
  text-decoration: line-through;
  border-left: 6px solid rgba(8, 0, 255, 0.474);
}

.dark-mode .task-priority-High {
  border-left: 6px solid rgba(255, 0, 0, 0.737);
}

.dark-mode .task-priority-Medium {
  border-left: 6px solid rgba(255, 166, 0, 0.871);
}

.dark-mode .task-priority-Low {
  border-left: 6px solid rgba(0, 189, 0, 0.795);
}

.dark-mode .task-completed {
  text-decoration: line-through;
  border-left: 6px solid rgba(174, 75, 255, 0.914);
}

/*Task priority indicator end*/

option:hover {
  background-color: white;
  color: white;
}

select {
  width: 150px;
}

select option {
  width: 150px;
}

.light-mode #voice-command-button {
  scale:1.25;
  margin:10px;
  background-color: #000000;
  position: fixed;
  bottom: 72px;
  right: 20px;
  z-index: 1000;
  cursor: pointer; 
  border: none; 
  outline: none; 
  transition:  0.6s ease; 
  box-shadow: #0000008b 0px 0px 6px 0px;
}

.light-mode #voice-command-button:hover{
  box-shadow: #000000 0px 0px 10px 0px;
}
.dark-mode #voice-command-button i{
  color: rgb(0, 0, 0) ;
}
.light-mode #voice-command-button i{
  color: rgb(159, 221, 255) ;
}


.dark-mode #voice-command-button {
  scale:1.2;
  margin:10px;
  background-color: #ffffff;
  position: fixed;
  bottom: 72px;
  right: 22px;
  z-index: 1000;
  transition:  0.4s ease; 
  box-shadow: #b1b1b1 0px 0px 8px 0px;
}
.dark-mode #voice-command-button:hover{
  background-color: #e5e5e5;
  box-shadow: #b1b1b1 0px 0px 19px 0px;
}
/* new css for form */
#item,
#priority,
#dueDate {
  width: calc(33.33% - 10px);
  margin-bottom: 10px;
}
#item {
  width: 100%;
  padding: 15px;
}
/* css for the priority selection */

#dueDate {
  cursor: pointer;
}

#description {
  width: 100%;
  padding: 15px;
  text-overflow: ellipsis;
  border-radius: 8px;
  height: 80px;
  resize: none;
  overflow: auto;
  -ms-overflow-style: none;
  scrollbar-width: none;
}

#description::-webkit-scrollbar {
  display: none;
}

/* css for the submit button addForm */

.dark-mode #submitBtn:disabled {
  border-color: #27272790;
  background-color: #47474796;
  color: #f3f1f1;
}

@media screen and (max-width: 600px) {
  #addForm {
    padding: 20px;
  }

  #item,
  #priority,
  #dueDate,
  #description {
    width: 100%;
  }

  #submitBtn,
  #editTask {
    width: 100%;
  }
}

#addForm input {
  border-radius: 30px;
  max-height: 60px;
  margin-right: 10px;
}

#priority {
  padding: 7px;
  max-height: 60px;
  margin-right: 10px;
  border-radius: 20px;
  border-style: none;
  border: 2px solid rgba(70, 70, 70, 0.873);
  transition: 0.3s ease-in;
}

.dark-mode #priority {
  padding: 7px;
  max-height: 60px;
  margin-right: 10px;
  border-radius: 20px;
  border-style: none;
  border: 3px solid rgb(146, 56, 255);
  transition: 0.3s ease-in;
}
#dueDate {
  max-width: 150px;
}

#item {
  max-width: 200px;
}

ul {
  list-style-type: disc;
  padding: 0;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-wrap: wrap;
  width: 100vw;
}
ul.list-group {
  width: auto;
}

li {
  margin: 10px;
}

.voice-input {
  border-radius: 30px;
}

.titleText {
  color: #79c5ff;
}

.light-mode .footer-down {
  flex-direction: column !important;
  position: -webkit-sticky;
  position: relative;
  bottom: 0;
  height: 5vh;

  color: rgb(101, 101, 101);
  padding-top: 10px;
  padding-left: 0px;
  max-width: auto;
  background: radial-gradient(2224px at 10.6% 8.8%, rgb(255, 255, 255) 0%, rgb(175, 215, 255) 100.2%);
  backdrop-filter: blur( 4px );
  -webkit-backdrop-filter: blur( 4px );
  border: 1px solid rgba( 255, 255, 255, 0.18 );
  
}
.dark-mode .footer-down {
  position: -webkit-sticky;
  position: relative !important;
  bottom: 0;
  height: 5vh;
  color: rgb(255, 255, 255);
  padding-top: 10px;
  padding-left: 0px;
  max-width: auto;
  background: rgba(193, 99, 255, 0.25);
  backdrop-filter: blur( 4px );
  -webkit-backdrop-filter: blur( 4px );
  border: 1px solid rgba( 255, 255, 255, 0.18 );
}

.light-mode .inputcss {
  width: 100%;
  border-radius: 20px;
  height: 40px;
  padding: 0 20px;
  border-style: none;
  background-color: rgba(255, 255, 255, 0.536);
  border: 2px solid rgba(70, 70, 70, 0.873);
  transition: 0.3s ease-in;
  margin-left: 5px;
}

.dark-mode .inputcss {
  width: 100%;
  border-radius: 20px;
  height: 40px;
  padding: 0 20px;
  border-style: none;
  background-color: rgb(255, 255, 255);
  border: 3px solid rgb(146, 56, 255);
  transition: 0.3s ease-in;
}

.checkbox:checked:before {
  background-color: green;
}

.dark-mode .btn-outline-dark {
  color: rgb(146, 56, 255);
  border-color: rgb(146, 56, 255);
}
.dark-mode .btn-outline-dark:hover {
  color: #fff;
  background-color: rgb(146, 56, 255);
  border-color: rgb(146, 56, 255);
}

.dark-mode .btn-dark {
  color: #fff;
  background-color: rgb(146, 56, 255);
  border-color: rgb(146, 56, 255);
}

.dark-mode .btn-dark:hover {
  color: #fff;
  background-color: rgb(123, 52, 210);
  border-color: rgb(123, 52, 210);
}

.dark-mode .btn-dark:not(:disabled):not(.disabled).active,
.dark-mode .btn-dark:not(:disabled):not(.disabled):active,
.dark-mode .show > .dark-mode .btn-dark.dropdown-toggle {
  color: #fff;
  background-color: rgb(123, 52, 210);
  border-color: rgb(123, 52, 210);
}

.light-mode .custom-confirm,
.light-mode .custom-confirm-all {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  align-items: flex-start;
  justify-content: center;
}

.dark-mode .confirm-content,
.dark-mode .confirm-content-all {
  background: rgb(24, 24, 24);
  padding: 20px;
  top: 20px;
  border-radius: 5px;
  text-align: center;
  position: relative;
}

.light-mode #myDropdown .a1 {
  background: #00bfffd5;
}
.light-mode #myDropdown .a2 {
  background: #0091dfd8;
}
.light-mode #myDropdown .a3 {
  background: #006dcdcc;
}
.light-mode #myDropdown .a4 {
  background: #0075cea5;
}

.dark-mode #myDropdown .a1 {
  background: #8000ffd5;
}
.dark-mode #myDropdown .a2 {
  background: #8d00dfd8;
}
.dark-mode #myDropdown .a3 {
  background: #8c00cdcc;
}
.dark-mode #myDropdown .a4 {
  background: #8d00cea5;
}

.light-mode #myDropdown {
  color: rgba(1, 63, 97, 0.967);
}

.dark-mode #myDropdown {
  color: rgba(47, 0, 65, 0.967);
}

#myDropdown a:hover{
  color:white;
}

.github-icon{
  position: absolute;
    cursor: pointer;
    top: 25px;
    right: 35px;
    bottom: 0px;
    transition: all 0.4s ease 0s;
}

.light-mode .github-icon a i{
  font-size: 50px;
  color:black !important;
}

.dark-mode .github-icon a i{
  font-size: 50px;
  color:rgb(227, 227, 227) !important;
}
.zero1 ul a{
  list-style-type: none;
  text-decoration: none;
  transform: font-size;
}
.zero1 ul a:hover{
  font-size: large;
  transition: 0.5s linear;
}

  </style>

  <title>Task Scheduler</title>

  <!-- Scripts at the end for better performance -->
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Web-Speech-API/0.3.1/web-speech-api.min.js"></script>

</head>

<body>
  <div class="content-container">
  <!-- Preloader Starts -->
  <div class="preloader">
    <div class="writing-loader">
      <i class="fa-regular fa-clipboard"></i>
      <i class="file-text fa-solid fa-clipboard-check"></i>
      <div class="pen-container">
        <i class="pen fas fa-pencil"></i>
      </div>
    </div>
    <h1 id="todo-header" style="margin-top: 10%; "></h1>
  </div>
  <!-- Preloader Ends -->
  <div id="lblsuccess" class="message success-message" style="display: none"></div>
  <div id="lblerror" class="message danger-message" style="display: none"></div>
  <!--ThemeMode Switcher-->
  <div>
    <label class="switch animate__animated  animate__fadeInLeftBig animate__slow  animate__delay-2s"
      style="margin-left: 30px; margin-top: 30px;">
      <span class="sun"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <g fill="#ffd43b">
            <circle r="5" cy="12" cx="12"></circle>
            <path
              d="m21 13h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm-17 0h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm13.66-5.66a1 1 0 0 1 -.66-.29 1 1 0 0 1 0-1.41l.71-.71a1 1 0 1 1 1.41 1.41l-.71.71a1 1 0 0 1 -.75.29zm-12.02 12.02a1 1 0 0 1 -.71-.29 1 1 0 0 1 0-1.41l.71-.66a1 1 0 0 1 1.41 1.41l-.71.71a1 1 0 0 1 -.7.24zm6.36-14.36a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm0 17a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm-5.66-14.66a1 1 0 0 1 -.7-.29l-.71-.71a1 1 0 0 1 1.41-1.41l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.29zm12.02 12.02a1 1 0 0 1 -.7-.29l-.66-.71a1 1 0 0 1 1.36-1.36l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.24z">
            </path>
          </g>
        </svg></span>
      <span class="moon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
          <path
            d="m223.5 32c-123.5 0-223.5 100.3-223.5 224s100 224 223.5 224c60.6 0 115.5-24.2 155.8-63.4 5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6-96.9 0-175.5-78.8-175.5-176 0-65.8 36-123.1 89.3-153.3 6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z">
          </path>
        </svg></span>
      <input type="checkbox" id="modeToggle" class="mode-toggle input" />
      <span class="slider"></span>
    </label>
  </div>


  <!-- Github Icon-->
  <div class="github-icon">
    <a href="https://github.com/Sameer172003/Task_Scheduler" target="_blank" title="GitHub Profile">
      <i class="fab fa-github"></i>
    </a>
  </div>


  <!-- Confirmation dialog -->
  <div id="custom-confirm" class="custom-confirm">
    <div class="confirm-content">
      <div>
        <i id="confirm-cancel" class="fas fa-times close-button"></i>
      </div>
      <h2>Confirmation</h2>
      <h6 id="confirm-msg">Are you sure you want to delete this task?</h6>
      <button id="confirm-yes" class="btn btn-outline-success">Yes</button>
      <button id="confirm-no" class="btn btn-outline-danger">No</button>
    </div>
  </div>

  <!-- Confirmation dialog for duplicate tasks -->
  <div id="duplicate-task" class="custom-confirm">
    <div class="confirm-content">
      <div>
        <i id="duplicate-cancel" class="fas fa-times close-button"></i>
      </div>
      <h2>Alert</h2>
      <h6 id="duplicate-msg">This task is already present</h6>
      <button id="duplicate-ok" class="btn btn-outline-success">OK</button>
    </div>
  </div>


  <!-- Confirmation All- dialog -->
  <div id="custom-confirm-all" class="custom-confirm-all">
    <div class="confirm-content-all">
      <div>
        <i id="confirm-cancel-all" class="fas fa-times close-button"></i>
      </div>
      <h2>Confirmation</h2>
      <h6 id="confirm-msg-all">Are you sure you want to delete this task?</h6>
      <button id="confirm-yes-all" class="btn btn-outline-success">Yes</button>
      <button id="confirm-no-all" class="btn btn-outline-danger">No</button>
    </div>
  </div>

  <!-- all dialogs code ends -->

  <div class 
  <!-- main cintainer -->
  <div class="container">
    {{!-- <img onclick="topFunction()" src="/templates/scroll.png" id="myBtn"> --}}
    <h1 class="text-center titleText "><span id="element"></span></h1>
    <p class="text-center animate__animated  animate__flipInX animate__slow  animate__delay-3s">Simply add
      your tasks here</p>
    <div class="container main mt-5 w-80 animate__animated  animate__fadeInDown animate__slow animate__delay-2s">
      <h3 class="text-center mb-4" id="maintitle">Add your tasks below :</h3>

      <!-- form components to add new task -->
      <form id="addForm" class="row w-100 d-flex flex-wrap justify-content-between align-items-center">

        <!-- task field -->
        <input class="form-control inputcss" type="text" onkeyup="enableSubmit(this, 'submitBtn')" id="item"
          placeholder="Enter Task Name..." />

        <!-- description fiels -->
        <textarea style="overflow-y: scroll; resize: none;width:100%;" class="inputcss mb-3"
          placeholder="Enter Description " id="description"></textarea>

        <!-- priority dropdown list -->
        <select id="priority">
          <option value="" selected disabled hidden>Select Priority</option>
          <option value="Low" style="background:rgba(84, 211, 0, 0.605); color:rgba(42, 105, 0, 0.395) ;"
            onfocus="this.size=3">Low</option>
          <option value="Medium" style="background:rgba(255, 225, 125, 0.788); color: rgba(194, 149, 0, 0.788);"
            onfocus="this.size=3">Medium</option>
          <option value="High" style="background:rgba(255, 120, 120, 0.786);color:rgba(191, 0, 0, 0.786);"
            onfocus="this.size=3">High</option>
        </select>

        <!-- date button -->
        <input class="btn btn-dark" id="dueDate" placeholder="Date" />
        <input type="submit" class="btn btn-outline-success addbtn" id="submitBtn" value="Add" style="width:80px"
          disabled />
        <button id="editTask" class="form_btn btn btn-outline-primary " style="display: none;  width:80px;">
          Edit
        </button>
      </form>

      <!-- form to display all tasks loaded from localstorage -->
      <div class="text-center">
        
      <div id="taskActions" style="display: none;">
        <h3 class="mt-4 text-center" id="heading-tasks">Tasks</h3>
        <div class="search-container mb-3">
          <input type="text" id="searchBar" placeholder=" Search tasks..."
            class="form-control w-75 mx-auto mt-3 inputcss">
        </div>
        <!-- sorting elements -->
        <div class="text-center">
    <div class="dropdown d-inline-block">
        <button class="btn btn-outline-dark dropbtn d-flex align-items-center ml-2" onclick="myFunction();">
            <ion-icon class="dropbtn" name="funnel-outline" style="font-size: 30px; margin-right: 6px"></ion-icon>
            Sort By
            <ion-icon class="dropbtn" name="chevron-down-outline" style="font-size: 20px; margin-left: 6px"></ion-icon>
        </button>
        <div id="myDropdown" class="dropdown-content ml-2 mt-0.5">
            <a onclick="sortByPriority('highToLow');" class="a1">High to Low Priority</a>
            <a onclick="sortByPriority('lowToHigh');" class="a2">Low to High Priority</a>
            <a onclick="sortByDueDate('early');" class="a3">Early To Do</a>
            <a onclick="sortByDueDate('late');" class="a4">Lately To Do</a>
        </div>
    </div>
</div>


        <!--Dynamic Task list-->
        <form id="newTaskForm" class="mt-3">
          <ul class="list-group " id="taskList"></ul>
        </form>
        <button id="clearAllTasks" class="btn btn-outline-danger clear_btn" onclick="clearAllTasks();">
          <span class="d-flex align-items-center">
            <ion-icon name="trash-outline" style="font-size: 20px; margin-right: 6px"></ion-icon>Clear All Tasks</span>
        </button>
      </div>
    </div>
    </div>
  </div>

  <br />

  <div>
    <h2 style=" text-align: center" class="mt-5 animate__animated animate__fadeInUp animate__slow  animate__delay-3s">
      Why Simply Tasked?</h2>
    <p style="padding: 0px 10px; text-align: center"
      class="mb-4 animate__animated animate__fadeInUp animate__slow  animate__delay-3s">

      Simply, because it is a SIMPLE To-Do List Tool to organize your tasks
      efficiently.
    </p>
    <div class="list mb-5 animate__animated animate__fadeInUp animate__slow  animate__delay-3s "
      style="text-align: center ">
      <ul>
        <li>Intuitive task management</li>
        <li>Seamless due date tracking</li>
        <li>Beautiful and user-friendly design</li>
      </ul>
    </div>
  </div>
  <div>
    <h2 style=" text-align: center" class="mt-5 animate__animated animate__fadeInUp animate__slow  animate__delay-3s">
      About Me</h2>
    <p style="padding: 0px 10px; text-align: center"
      class="mb-4 animate__animated animate__fadeInUp animate__slow  animate__delay-3s">
      My name is <b>Sameer</b>, I am an Electronics and Communication Engineering final year student with robust
      skills in data structures and algorithms, alongside comprehensive training in MERN stack development. Adept
      at building dynamic and responsive web applications, with a strong foundation in JavaScript, Node.js, Express,
      React, and MongoDB. Demonstrates excellent problem-solving abilities and a keen interest in continuouslearning
      and professional development. Eager to leverage academic knowledge and technical skills to contribute to
      innovative software engineering projects.
    </p>
    <div class="list zero1 mb-5 animate__animated animate__fadeInUp animate__slow  animate__delay-3s "
      style="text-align: center ">
      <ul>
        <a href="https://drive.google.com/file/d/1boa7R1xViwTUhfWguGxEugHbTrZakuPD/view?usp=sharing"><li>Coding Profile</li></a>
        <a href="https://sameer-portfolio-snowy.vercel.app/"><li>Portfolio</li></a>
        <a href="https://www.linkedin.com/in/sameer-ojha-113956286/"><li>LinkedIn</li></a>
      </ul>
    </div>
  </div>
</div>
</div>
  <!-- loading all external/internal scripts -->
  <script src="scroll.js"></script>
  <script src="index.js"></script>
  <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
  <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js">
  </script>
  <script src="https://unpkg.com/typed.js@2.0.16/dist/typed.umd.js"></script>
  <script>
    var strings = ['Create Tasks 📝', 'Organize tasks, boost daily productivity! 🚀.', 'Achieve Your Goals One Task at a Time 📃', 'Plan, Act, Achieve: Get Started Now! 😉..'];

    function startTypedAnimation() {
      var typed = new Typed('#element', {
        strings: strings,
        typeSpeed: 50,
        onComplete: function () {
          typed.reset();
          strings.push(strings.shift());
        },
      });
    }

    startTypedAnimation(); 
  </script>
   <script>
  document.addEventListener('DOMContentLoaded', function () {
    var taskList = document.getElementById('taskList');
    var taskActions = document.getElementById('taskActions');
    init();
    
    // Function to check and toggle the display of taskActions
    function checkTasksAndToggle() {
      if (taskList && taskList.children.length > 0) {
        // At least one task is present, show the container
        taskActions.style.display = 'block';
      } else {
        // No tasks, hide the container
        taskActions.style.display = 'none';
      }
    }

    // Check tasks initially
    checkTasksAndToggle();

    // Use MutationObserver to detect changes in the DOM
    var observer = new MutationObserver(function (mutations) {
      // Check tasks whenever the content of taskList changes
      checkTasksAndToggle();
    });

    // Configure the observer to watch for changes in the child nodes of taskList
    var observerConfig = { childList: true };

    // Start observing
    observer.observe(taskList, observerConfig);
  });
</script>



  <!-- button to start adding tasks by voice -->
  <button id="voice-command-button" title="Voice Command Format:
  - To Add Task: 'Add [task] due [date] priority [priority]'
  - To Delete Task: 'Delete task [task]'
  - To Edit Task: 'Edit task [old task] to [new task] due date [new due date] priority [new priority]'"

    class="btn btn-outline-primary btn-lg voice-input animate__animated animate__fadeInRightBig animate__slow  animate__delay-2s">
    <i class="fas fa-microphone"></i></button>

  <!-- footer -->
  <section class="footer-down">
    <div>
      <marquee width="100%" direction="left">Developed and Designed By <b>Sameer</b> | © All Rights Reserved <b>2024</b>
        </marque>
    </div>
  </section> 
    {{!-- <script>
    document.addEventListener("DOMContentLoaded", function() {
  let mybutton = document.getElementById("myBtn");

  window.addEventListener("scroll", scrollFunction);

  function scrollFunction() {
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
      mybutton.style.display = "block";
    } else {
      mybutton.style.display = "none";
    }
  }

  mybutton.addEventListener("click", function() {
    // Check for browser support
    if ("scrollBehavior" in document.documentElement.style) {
      // Smooth scroll to the top
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    } else {
      // Fallback for browsers that do not support smooth scrolling
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    }
  });
});
  </script> --}}

  <script>
    // Creating instances of document objects
const taskList = document.getElementById("taskList");
const dueDateInput = document.getElementById("dueDate");
const priorityInput = document.getElementById("priority");
const submitBtn = document.getElementById("submitBtn");
const editTaskBtn = document.getElementById("editTask");
const tasksHeading = document.getElementById("heading-tasks");
const searchBar = document.getElementById("searchBar");
const modeToggleBtn = document.getElementById("modeToggle");
const checkboxes = document.querySelectorAll(".form-check-input");
let editItem = null;
const tasksWithPriority = [];
let tasksTitleArray = [];
const priorityColors = {
  High: "task-priority-High",
  Medium: "task-priority-Medium",
  Low: "task-priority-Low",
  Completed: "task-completed",
};

const priorityValues = {
  High: 3,
  Medium: 2,
  Low: 1,
};

// Adding Event Listeners to Document Objects [buttons, text fields, dropdown lists]
editTaskBtn.addEventListener("click", (e) => {
  handleEditClick(e);
});
submitBtn.addEventListener("click", (e) => {
  addItem(e);
});
taskList.addEventListener("click", handleItemClick);
modeToggleBtn.addEventListener("click", toggleMode);
checkboxes.forEach((checkbox) => {
  checkbox.addEventListener("change", markAsComplete);
});

flatpickr(dueDateInput, {
  enableTime: false,
  dateFormat: "Y-m-d",
});

//settibng up default theme
function init() {
  const searchBar = document.getElementById("searchBar");
  searchBar.addEventListener("input", handleSearch);
  loadTasksFromLocalStorage();
  tasksCheck();
}

//search logic
function handleSearch() {
  const searchTerm = searchBar.value.toLowerCase();
  const tasks = document.querySelectorAll(".list-group-item");
  tasks.forEach((task) => {
    const taskTitle = task.childNodes[1].textContent.trim().toLowerCase();
    if (taskTitle.includes(searchTerm)) {
      task.style.display = "block";
    } else {
      task.style.display = "none";
    }
  });
}

//logic to check whether no task is present and hide some buttons
function tasksCheck() {
  const tasks = taskList.children;
  if (tasks.length === 0) {
    tasksHeading.classList.toggle("hidden");
    searchBar.classList.toggle("hidden");
    document.querySelector(".clear_btn").style.display = "none";
    document.querySelector(".dropdown").style.display = "none";
  }
}

//this gets called after 'edit' button, fills text fields with data to be edited
function handleEditItem(e) {
  e.preventDefault();
  editTaskBtn.style.display = "inline";
  submitBtn.style.display = "none";
  const taskTitle = e.target.parentElement.childNodes[1].textContent.trim();
  console.log(e.target.parentElement.childNodes);
  const taskDescription = e.target.parentElement.childNodes[4].textContent
    .trim()
    .replace("Description:", "");
  document.getElementById("item").value = taskTitle;
  document.getElementById("description").value = taskDescription;
  document.getElementById("maintitle").innerText = "Edit your tasks below :";
  editItem = e.target;
  document.documentElement.scrollTop = 0;
  document.getElementById("item").focus();
}

//actual logic after editing a task and for adding a task   (gets called after edit button click, onChnage text fileds, date, priority)
function handleEditClick(e) {
  e.preventDefault();
  const itemInput = document.getElementById("item");
  const dueDateInput = document.getElementById("dueDate");
  const descriptionInput = document.getElementById("description");
  const editedItemText = itemInput.value;
  const editedDescriptionText = descriptionInput.value;
  const editedDueDate = new Date(dueDateInput.value);
  const currentDate = new Date().toISOString().split("T")[0];
  const editedPriority = document.getElementById("priority").value;

  //check if all fields are filled [basic validation]
  if (!editedItemText.trim()) {
    displayErrorMessage("Task not entered");
    return false;
  }

  if (!editedItemText) {
    displayErrorMessage("Title must not be empty!!!.");
    return false;
  }

  if (editedDueDate < new Date(currentDate)) {
    displayErrorMessage("Due date has already passed !!!");
    return false;
  }

  if (!editedPriority) {
    displayErrorMessage("Please select priority");
    return false;
  }
  //[basic validation ends]

  //actual manuplation of data
  const listItem = editItem.parentElement;
  listItem.childNodes[1].textContent = editedItemText;
  listItem.childNodes[4].textContent = editedDescriptionText.trim()
    ? "Description: " + editedDescriptionText
    : "";
  listItem.childNodes[7].textContent = editedPriority;
  if (editedDueDate >= new Date(currentDate)) {
    listItem.childNodes[6].textContent = `Due Date:${dueDateInput.value}`;
  }
  const capitalizedPriority =
    editedPriority.charAt(0).toUpperCase() +
    editedPriority.slice(1).toLowerCase();
  listItem.className = `list-group-item card shadow mb-4 bg-transparent ${priorityColors[capitalizedPriority]}`;
  displaySuccessMessage("Task edited successfully !!!");
  editItem = null;
  itemInput.value = "";
  descriptionInput.value = "";
  dueDateInput.value = "";
  document.getElementById("maintitle").innerText = "Add your tasks below :";
  editTaskBtn.style.display = "none";
  submitBtn.style.display = "inline";
  saveTasksToLocalStorage();
}

//Voice handled adding task logic   [start]
document.addEventListener("DOMContentLoaded", function () {
  const recognition = new (window.SpeechRecognition ||
    window.webkitSpeechRecognition)();
  recognition.lang = "en-US";
  recognition.interimResults = false;

  let isListening = false;
  const voiceCommandButton = document.getElementById("voice-command-button");
  voiceCommandButton.addEventListener("click", function () {
    if (isListening) {
      recognition.stop();
      isListening = false;
      voiceCommandButton.innerHTML = '<i class="fas fa-microphone"></i>';
    } else {
      recognition.start();
      isListening = true;
      voiceCommandButton.innerHTML = '<i class="fas fa-microphone-slash"></i>';
    }
  });

  recognition.onresult = function (event) {
    const transcript = event.results[0][0].transcript;
    handleVoiceCommand(transcript);
  };

  recognition.onend = function () {
    isListening = false;
    voiceCommandButton.innerHTML = '<i class="fas fa-microphone"></i>';
  };

  function handleVoiceCommand(command) {
    console.log("Recognized Command:", command);
    const commandParts = command.split(" ");

    if (command.length >= 4) {
      if (command.toLowerCase().includes("add")) {
        const titleIndex = commandParts.indexOf("add") + 1;
        const dueIndex = commandParts.indexOf("due");
        const dateIndex = commandParts.indexOf("date");
        const priorityIndex = commandParts.indexOf("priority");
        if (
          titleIndex < dueIndex &&
          dueIndex < dateIndex &&
          dateIndex < priorityIndex
        ) {
          const taskTitle = commandParts.slice(titleIndex, dueIndex).join(" ");
          const dueDate = commandParts
            .slice(dateIndex + 1, priorityIndex)
            .join(" ");
          const priority = commandParts[priorityIndex + 1];
          addTask(taskTitle, dueDate, priority);
          return;
        }
      } else if (
        command.toLowerCase().includes("edit") &&
        command.toLowerCase().includes("task")
      ) {
        const editIndex = commandParts.indexOf("edit");
        const taskIndex = commandParts.indexOf("task");
        const toIndex = commandParts.indexOf("to");
        const dueDateIndex = commandParts.indexOf("due");
        const priorityIndex = commandParts.indexOf("priority");
        if (
          editIndex !== -1 &&
          taskIndex !== -1 &&
          toIndex !== -1 &&
          dueDateIndex !== -1 &&
          priorityIndex !== -1 &&
          toIndex > taskIndex &&
          dueDateIndex > toIndex &&
          priorityIndex > dueDateIndex &&
          priorityIndex < commandParts.length - 1
        ) {
          const oldTitle = commandParts.slice(taskIndex + 1, toIndex).join(" ");
          const newTitle = commandParts
            .slice(toIndex + 1, dueDateIndex)
            .join(" ");
          const newdueDate = commandParts.slice(
            dueDateIndex + 2,
            dueDateIndex + 4
          );
          const newpriority = capitalizeFirstLetter(
            commandParts[priorityIndex + 1]
          );

          function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
          }
          editTask(oldTitle, newTitle, newdueDate, newpriority);
          return;
        }
      } else if (command.toLowerCase().includes("delete")) {
        const titleIndex = commandParts.indexOf("task") + 1;
        const taskTitle = commandParts.slice(titleIndex).join(" ");
        deleteTask(taskTitle);
      } else {
        displayErrorMessage("Invalid voice command format.");
      }
    }
  }
  //Voice handled adding task logic   [end]

  function deleteTask(taskTitle) {
    const taskElement = findTaskElement(taskTitle);
    if (taskElement) {
      taskElement.remove();
      saveTasksToLocalStorage();
      displaySuccessMessage(`Task "${taskTitle}" deleted successfully.`);
    } else {
      displayErrorMessage(`Task "${taskTitle}" not found.`);
    }
  }

  //Setting edited data to below cards components
  function editTask(
    oldTitle,
    newTitle,
    newdueDate,
    newpriority,
    newDescription
  ) {
    const taskElement = findTaskElement(oldTitle);
    if (taskElement) {
      const dueDateElement = taskElement.querySelector("#task-dueDate");
      const priorityElement = taskElement.querySelector("#task-priority");
      const descElement = taskElement.querySelector("#description-at");
      const titleTextNode = taskElement.childNodes[1];
      titleTextNode.textContent = titleTextNode.textContent.replace(
        oldTitle,
        newTitle
      );
      //updating fields data
      if (dueDateElement) {
        dueDateElement.textContent = `Due Date: ${newdueDate}`;
        dueDateElement.id = "task-dueDate";
      }
      if (priorityElement) {
        priorityElement.textContent = newpriority;
        priorityElement.id = "task-priority";
      }
      if (descElement) {
        descElement.textContent = newDescription;
        descElement.id = "task-description";
      }

      //redesplaying task data in cards
      displayTaskDetails(taskElement);
      saveTasksToLocalStorage();
      displaySuccessMessage(`Task "${oldTitle}" edited successfully.`);
    } else {
      displayErrorMessage(`Task "${oldTitle}" not found.`);
    }
  }

  //returns the instance of task to be deleted or edited
  function findTaskElement(taskTitle) {
    const tasks = document.querySelectorAll(".list-group-item");
    for (const task of tasks) {
      const title = task.childNodes[1].textContent.trim().toLowerCase();
      if (title === taskTitle.toLowerCase()) {
        return task;
      }
    }
    return null;
  }

  //logic to add task, can be used for voice commands only, (need to be update this function!)
  function addTask(taskTitle, dueDate, priority) {
    const todoList = document.getElementById("taskList");
    const existingTasks = todoList.querySelectorAll("li");
    existingTasks.forEach((item) =>
      console.log(item.textContent.trim().toLowerCase())
    );
    const taskExists = Array.from(existingTasks).some(
      (item) =>
        item.textContent.trim().toLowerCase() === taskTitle.trim().toLowerCase()
    );

    if (taskExists) {
      displayErrorMessage("Task already exists !!!");
      return;
    }

    const li = document.createElement("li");
    const capitalizedPriority =
      priority.charAt(0).toUpperCase() + priority.slice(1).toLowerCase();
    console.log("Priority:", priority);
    console.log("Priority Class:", priorityColors[capitalizedPriority]);

    li.className = `list-group-item card shadow mb-4 bg-transparent ${priorityColors[capitalizedPriority]}`;

    const completeCheckbox = document.createElement("input");
    completeCheckbox.type = "checkbox";
    completeCheckbox.className = "form-check-input task-completed";
    completeCheckbox.addEventListener("change", markAsComplete);

    const deleteButton = document.createElement("button");
    deleteButton.type = "button";
    deleteButton.className = "btn btn-outline-danger float-right delete";
    deleteButton.innerHTML =
      '<ion-icon name="trash-outline" style="font-size: 20px"></ion-icon>';

    const editButton = document.createElement("button");
    editButton.className = "btn btn-outline-success btn-sm float-right edit";
    editButton.innerHTML =
      '<ion-icon name="create-outline" style="font-size: 20px"></ion-icon>';
    editButton.style.marginRight = "8px";
    editButton.addEventListener("click", handleEditItem);

    const dateTimeParagraph = document.createElement("p");
    dateTimeParagraph.className = "text-muted";
    dateTimeParagraph.id = "created-at";
    dateTimeParagraph.style.fontSize = "15px";
    dateTimeParagraph.style.margin = "0 19px";
    dateTimeParagraph.appendChild(
      document.createTextNode("Created:" + new Date().toLocaleString())
    );

    const dueDateParagraph = document.createElement("p");
    dueDateParagraph.className = "text-muted";
    dueDateParagraph.id = "task-dueDate";
    dueDateParagraph.style.fontSize = "15px";
    dueDateParagraph.style.margin = "0 19px";
    dueDateParagraph.appendChild(
      document.createTextNode("Due Date:" + dueDate)
    );

    const priorityParagraph = document.createElement("p");
    priorityParagraph.className = "text-muted";
    priorityParagraph.id = "task-priority";
    priorityParagraph.style.fontSize = "15px";
    priorityParagraph.style.margin = "0 19px";
    priorityParagraph.appendChild(document.createTextNode(capitalizedPriority));

    li.appendChild(completeCheckbox);
    li.appendChild(document.createTextNode(taskTitle));
    li.appendChild(deleteButton);
    li.appendChild(editButton);
    li.appendChild(dateTimeParagraph);
    li.appendChild(dueDateParagraph);
    li.appendChild(priorityParagraph);
    todoList.appendChild(li);
    saveTasksToLocalStorage();

    displayTaskDetails(li);
  }
});
//adding tasks through voice command ends here

//logging task details for debugging purpose, does nothing change in UI.
function displayTaskDetails(taskElement) {
  if (taskElement) {
    const dueDateElement = taskElement.querySelector("#task-dueDate");
    const priorityElement = taskElement.querySelector("#task-priority");
    const dueDate = dueDateElement
      ? dueDateElement.textContent.split(":")[1].trim()
      : null;
    const priority = priorityElement
      ? priorityElement.textContent.trim()
      : null;
    console.log(`Task Details - Due Date: ${dueDate}, Priority: ${priority}`);
  }
}

function showComfirmboxForDuplicateTasks() {
  const confirmationBox = document.getElementById("duplicate-task");

  //display confirmination message
  delalert_title = document.getElementById("duplicate-msg");
  delalert_title.innerHTML = "&#9888; This task is already present";
  delalert_title.className = "alert alert-danger";
  delalert_title.role = "alert";

  const confirmYesButton = document.getElementById("duplicate-ok");
  const confirmCancelButton = document.getElementById("duplicate-cancel");

  //conform message controls click logic
  const handleYesClick = () => {
    confirmationBox.style.display = "none";
    confirmYesButton.removeEventListener("click", handleYesClick);
    confirmCancelButton.removeEventListener("click", handleCancelClick);
  };

  const handleCancelClick = () => {
    confirmationBox.style.display = "none";
    confirmYesButton.removeEventListener("click", handleYesClick);
    confirmCancelButton.removeEventListener("click", handleCancelClick);
  };

  confirmYesButton.addEventListener("click", handleYesClick);
  confirmCancelButton.addEventListener("click", handleCancelClick);

  confirmationBox.style.display = "flex";
}

//adding tasks through form manually-logic
function addItem(e) {
  e.preventDefault();
  tasksCheck();
  const newTaskTitle = document.getElementById("item").value;
  const description = document.getElementById("description").value;
  let dueDate = document.getElementById("dueDate").value;
  const priority = document.getElementById("priority").value;

  // Check if the due date has already passed
  const currentDate = new Date();
  const dueDateObj = new Date(dueDate);

  //check if the tasks are duplicate
  if (checkForDuplicateTasks(newTaskTitle)) {
    showComfirmboxForDuplicateTasks();
    return false;
  }

  let isDescritionPresent = description.trim() === "" ? false : true;

  //form validation code
  if (!newTaskTitle) {
    displayErrorMessage("Task Title should be filled!!!");
    tasksHeading.classList.add("hidden");
    searchBar.classList.add("hidden");
    return false;
  } else if (!dueDate) {
    displayErrorMessage("Please specify a due date !!!");
    return false;
  } else if (dueDateObj < currentDate) {
    displayErrorMessage("Due date has already passed !!!");
    return false;
  } else {
    tasksHeading.classList.remove("hidden");
    searchBar.classList.remove("hidden");
  }

  if (newTaskTitle.trim() === "") return false;
  else {
    document.getElementById("item").value = "";
    document.querySelector(".clear_btn").style.display = "inline";
    document.querySelector(".dropdown").style.display = "inline";
  }
  const creationDateTime = new Date().toLocaleString();
  createNewTask(
    newTaskTitle,
    creationDateTime,
    dueDate,
    priority,
    description,
    isDescritionPresent
  );
  saveTasksToLocalStorage();

  //clearing form fields after 'add' button
  document.getElementById("dueDate").value = "";
  document.getElementById("description").value = "";
  document.getElementById("priority").value = "";
}

//check for duplicate tasks
function checkForDuplicateTasks(newTaskTitle) {
  var taskList = document.getElementById("taskList");
  var listItems = taskList.querySelectorAll("li");
  var textArray = [];

  listItems.forEach(function (li) {
    // Get the text and extract the text content
    var textContent = li.textContent.trim();
    // Push the text content into the array
    textArray.push(textContent);
  });
  TitleArray = textArray.map(function (element) {
    // Use regular expression to match and capture the substring before "Description"
    var match = element.match(/^(.*?)Description/);
    // Check if there is a match and extract the captured group
    return match ? match[1] : null;
  });
  let isnewTitlepresent = TitleArray.includes(newTaskTitle);
  return isnewTitlepresent;
}

//logic for various item click events
function handleItemClick(e) {
  if (e.target.classList.contains("delete")) {
    e.preventDefault();
    const li = e.target.parentElement;
    const confirmationBox = document.getElementById("custom-confirm");

    //display confirmination message
    delalert_title = document.getElementById("confirm-msg");
    delalert_title.innerHTML =
      "&#9888; Are you sure you want to delete this task?";
    delalert_title.className = "alert alert-danger";
    delalert_title.role = "alert";

    const confirmYesButton = document.getElementById("confirm-yes");
    const confirmNoButton = document.getElementById("confirm-no");
    const confirmCancelButton = document.getElementById("confirm-cancel");

    //conform message controls click logic
    const handleYesClick = () => {
      confirmationBox.style.display = "none";
      li.parentElement.removeChild(li);
      tasksCheck();
      displaySuccessMessage("Task deleted successfully !!!");
      saveTasksToLocalStorage();
      confirmYesButton.removeEventListener("click", handleYesClick);
      confirmNoButton.removeEventListener("click", handleNoClick);
      confirmCancelButton.removeEventListener("click", handleCancelClick);
    };

    const handleNoClick = () => {
      confirmationBox.style.display = "none";
      confirmYesButton.removeEventListener("click", handleYesClick);
      confirmNoButton.removeEventListener("click", handleNoClick);
      confirmCancelButton.removeEventListener("click", handleCancelClick);
    };

    const handleCancelClick = () => {
      confirmationBox.style.display = "none";
      confirmYesButton.removeEventListener("click", handleYesClick);
      confirmNoButton.removeEventListener("click", handleNoClick);
      confirmCancelButton.removeEventListener("click", handleCancelClick);
    };

    confirmYesButton.addEventListener("click", handleYesClick);
    confirmNoButton.addEventListener("click", handleNoClick);
    confirmCancelButton.addEventListener("click", handleCancelClick);

    confirmationBox.style.display = "flex";
  }
  saveTasksToLocalStorage();
}

function markAsComplete(e) {
  const li = e.target.parentElement;
  const originalClassList = li.dataset.originalClassList;
  const editButton = li.querySelector(".edit");
  // Toggle the visibility of the button
  if (editButton)
    editButton.style.display =
      editButton.style.display === "none" ? "block" : "none";
  // If the original class list is stored, toggle it back
  if (originalClassList) {
    li.className = originalClassList;
    li.removeAttribute("data-original-class-list");
  } else {
    // If the original class list is not stored, store it and toggle "task-completed"
    li.dataset.originalClassList = li.className;
    li.classList.toggle("task-completed");
  }
}

// message box for success
function displaySuccessMessage(message) {
  document.getElementById("lblsuccess").innerHTML = message;
  document.getElementById("lblsuccess").style.display = "block";
  setTimeout(function () {
    document.getElementById("lblsuccess").style.display = "none";
  }, 3000);
}

// message box for error
function displayErrorMessage(message) {
  document.getElementById("lblerror").innerHTML = message;
  document.getElementById("lblerror").style.display = "block";
  setTimeout(function () {
    document.getElementById("lblerror").style.display = "none";
  }, 3000);
}

// Function to save tasks to local storage
function saveTasksToLocalStorage() {
  const tasks = document.querySelectorAll(".list-group-item");
  const tasksArray = extractTasksData(tasks);
  storeTasksInLocalStorage(tasksArray);
}

// Function to extract task data from DOM elements
// Function to extract tasks data from the DOM
function extractTasksData(tasks) {
  return Array.from(tasks).map((task) => {
    const taskText = task.childNodes[1].textContent;
    const isCompleted = task.classList.contains("completed");
    const createdAt = task.querySelector("#created-at").textContent;
    const description = task.querySelector("#description-at")
      ? task.querySelector("#description-at").textContent
      : "";
    const dueDate = task.querySelector("#task-dueDate").textContent;
    const priority = task.querySelector("#task-priority").textContent;

    return createTaskObject(
      taskText,
      isCompleted,
      createdAt,
      dueDate,
      priority,
      description
    );
  });
}

// Function to create a task object
function createTaskObject(
  text,
  completed,
  createdAt,
  dueDate,
  priority,
  description
) {
  return {
    text,
    completed,
    createdAt,
    dueDate,
    priority,
    description,
  };
}

// Function to store tasks in local storage
function storeTasksInLocalStorage(tasksArray) {
  localStorage.setItem("tasks", JSON.stringify(tasksArray));
}

// Function to retrieve tasks from local storage
function getTasksFromLocalStorage() {
  return JSON.parse(localStorage.getItem("tasks")) || [];
}

// Function to display tasks
function loadTasksFromLocalStorage() {
  const tasks = getTasksFromLocalStorage();
  const clearButton = document.querySelector(".clear_btn");
  const dropdown = document.querySelector(".dropdown");

  if (tasks.length > 0) {
    tasksHeading.classList.remove("hidden");
    searchBar.classList.remove("hidden");
    clearButton.style.display = "inline";
    dropdown.style.display = "inline";

    tasks.forEach((task) => {
      displayTask(task);
    });
  }
}

// Function to create and display a single task
function displayTask(task) {
  createNewTask(
    task.text,
    task.createdAt.slice(8),
    task.dueDate.split(":")[1],
    task.priority,
    task.description.slice(12)
  );
}

// Function to enable submit button
function enableSubmit(ref, btnID) {
  document.getElementById(btnID).disabled = false;
}

// Function to toggle between light and dark mode
function toggleMode() {
  document.body.classList.toggle("dark-mode");
  document.body.classList.toggle("light-mode");
  if (modeToggleBtn.checked === true) {
    localStorage.setItem("dark-mode", "enabled");
  } else {
    localStorage.setItem("dark-mode", null);
  }
}

// Function to clear all tasks
function clearAllTasks() {
  const taskList = document.getElementById("taskList"); // Replace with your actual task list ID
  const confirmationBoxAll = document.getElementById("custom-confirm-all");
  const alertTitle = document.getElementById("confirm-msg-all");
  const confirmYesButtonAll = document.getElementById("confirm-yes-all");
  const confirmNoButtonAll = document.getElementById("confirm-no-all");
  const confirmCancelButtonAll = document.getElementById("confirm-cancel-all");

  if (taskList.children.length > 0) {
    alertTitle.innerHTML = "&#9888; Are you sure you want to delete all tasks?";
    alertTitle.className = "alert alert-danger";
    alertTitle.role = "alert";

    confirmYesButtonAll.addEventListener("click", () => {
      confirmationBoxAll.style.display = "none";
      while (taskList.firstChild) {
        taskList.removeChild(taskList.firstChild);
      }
      document.querySelector(".clear_btn").style.display = "none";
      document.querySelector(".dropdown").style.display = "none";
      tasksHeading.classList.add("hidden");
      searchBar.classList.add("hidden");
      localStorage.clear();

      // saveTasksToLocalStorage();
    });

    confirmNoButtonAll.addEventListener("click", () => {
      confirmationBoxAll.style.display = "none";
    });

    confirmCancelButtonAll.addEventListener("click", () => {
      confirmationBoxAll.style.display = "none";
    });

    confirmationBoxAll.style.display = "flex";
  } else {
    // If there are no tasks, you may choose to show a message or take alternative action
    // alert("No tasks to clear");
  }
}

// Function to sort task list by due date
function sortByDueDate(order) {
  const sortTaskList = JSON.parse(localStorage.getItem("tasks"));

  if (order === "early") {
    sortTaskList.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
  } else if (order === "late") {
    sortTaskList.sort((a, b) => new Date(b.dueDate) - new Date(a.dueDate));
  }

  while (taskList.firstChild) {
    taskList.removeChild(taskList.firstChild);
  }

  tasksHeading.classList.add("hidden");
  searchBar.classList.add("hidden");
  localStorage.setItem("tasks", JSON.stringify(sortTaskList));
  loadTasksFromLocalStorage();
}

// Function to sort task list by priority
function sortByPriority(order) {
  const sortTaskList = JSON.parse(localStorage.getItem("tasks"));

  sortTaskList.sort((a, b) => {
    if (order === "highToLow") {
      return priorityValues[b.priority] - priorityValues[a.priority];
    } else if (order === "lowToHigh") {
      return priorityValues[a.priority] - priorityValues[b.priority];
    } else {
      return 0;
    }
  });

  while (taskList.firstChild) {
    taskList.removeChild(taskList.firstChild);
  }

  tasksHeading.classList.add("hidden");
  searchBar.classList.add("hidden");
  localStorage.setItem("tasks", JSON.stringify(sortTaskList));
  loadTasksFromLocalStorage();
}

// Function to handle dropdown menu
function myFunction() {
  document.getElementById("myDropdown").classList.toggle("show");
}

// Function to close dropdown menu when clicking outside
window.onclick = function (event) {
  if (!event.target.matches(".dropbtn")) {
    var dropdowns = document.getElementsByClassName("dropdown-content");
    for (var i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains("show")) {
        openDropdown.classList.remove("show");
      }
    }
  }
};

// Function to create a new task
function createNewTask(
  taskTitle,
  createdDate,
  dueDate,
  priority,
  description,
  isDescritionPresent
) {
  const li = document.createElement("li");
  li.className = `list-group-item card shadow mb-4 bg-transparent ${priorityColors[priority]}`;
  const completeCheckbox = document.createElement("input");
  completeCheckbox.type = "checkbox";
  completeCheckbox.className = "form-check-input task-completed";
  completeCheckbox.addEventListener("change", markAsComplete);
  const deleteButton = document.createElement("button");
  deleteButton.type = "button";
  deleteButton.className = "btn btn-outline-danger float-right delete";
  deleteButton.innerHTML =
    '<ion-icon name="trash-outline" style="font-size: 20px"></ion-icon>';
  deleteButton.style.paddingTop = "10px";
  deleteButton.style.PaddingRight = "10px";

  const editButton = document.createElement("button");
  editButton.className = "btn btn-outline-secondary btn-sm float-right edit";
  editButton.innerHTML =
    '<ion-icon name="create-outline" style="font-size: 20px"></ion-icon>';
  editButton.style.marginRight = "8px";
  editButton.style.paddingTop = "10px";
  editButton.style.PaddingRight = "10px";
  editButton.addEventListener("click", function (e) {
    handleEditItem(e);
  });

  const descriptionParagraph = document.createElement("p");
  if (isDescritionPresent === true) {
    descriptionParagraph.className = "text-muted";
    descriptionParagraph.id = "description-at";
    descriptionParagraph.style.fontSize = "15px";
    descriptionParagraph.style.margin = "0 19px";
    descriptionParagraph.appendChild(
      document.createTextNode("Description: " + description)
    );
  }

  const dateTimeParagraph = document.createElement("p");
  dateTimeParagraph.className = "text-muted";
  dateTimeParagraph.id = "created-at";
  dateTimeParagraph.style.fontSize = "15px";
  dateTimeParagraph.style.margin = "0 19px";
  dateTimeParagraph.appendChild(
    document.createTextNode("Created: " + createdDate)
  );

  const dueDateParagraph = document.createElement("p");
  dueDateParagraph.className = "text-muted";
  dueDateParagraph.id = "task-dueDate";
  dueDateParagraph.style.fontSize = "15px";
  dueDateParagraph.style.margin = "0 19px";
  dueDateParagraph.appendChild(document.createTextNode("Due Date: " + dueDate));

  const priorityParagraph = document.createElement("p");
  priorityParagraph.className = "text-muted";
  priorityParagraph.id = "task-priority";
  priorityParagraph.style.fontSize = "15px";
  priorityParagraph.style.margin = "0 19px";
  priorityParagraph.appendChild(document.createTextNode(priority));

  li.appendChild(completeCheckbox);
  li.appendChild(document.createTextNode(taskTitle));
  li.appendChild(deleteButton);
  li.appendChild(editButton);
  li.appendChild(descriptionParagraph);
  li.appendChild(dateTimeParagraph);
  li.appendChild(dueDateParagraph);
  li.appendChild(priorityParagraph);

  taskList.appendChild(li);
  displayTaskDetails(li);
}

// Function to hide preloader
document.addEventListener("DOMContentLoaded", function () {
  setTimeout(function () {
    document.querySelector(".preloader").style.display = "none";
  }, 2000);
});

// Function to simulate typing effect for header text
document.addEventListener("DOMContentLoaded", function () {
  const headerText = "Task Scheduler App";
  const headerElement = document.getElementById("todo-header");

  function typeText(text, index) {
    headerElement.textContent = text.slice(0, index);

    if (index < text.length) {
      setTimeout(function () {
        typeText(text, index + 1);
      }, 50);
    }
  }

  typeText(headerText, 0);
});

// Function to handle dark mode preference
function themeSwitcher() {
  if (localStorage.length === 0) {
    const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
    if (prefersDarkScheme.matches) {
      document.body.classList.toggle("dark-mode");
      localStorage.setItem("dark-mode", "enabled");
      modeToggleBtn.checked = true;
    } else {
      document.body.classList.toggle("light-mode");
      localStorage.setItem("dark-mode", null);
    }
  } else {
    if (localStorage.getItem("dark-mode") === "enabled") {
      document.body.classList.toggle("dark-mode");
      modeToggleBtn.checked = true;
    } else {
      document.body.classList.toggle("light-mode");
    }
  }
}
themeSwitcher();

  </script>
</body>
</html>